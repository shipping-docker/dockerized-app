#!/usr/bin/env bash
trap '[ "$?" -eq 0 ] || read -p "Looks like something went wrong in step ´$STEP´... Press any key to continue..."' EXIT


# Mac: Get host address
STEP="Setting XDEBUG_HOST to hostmachine IP"
[[ $XDEBUG_HOST ]] || XDEBUG_HOST=$(ip -o -4 addr list docker0 | awk '{print $4}' | cut -d/ -f1)
export XDEBUG_HOST

echo "setup host address to: $XDEBUG_HOST"

# Linux: Get host address
# Via: http://stackoverflow.com/questions/13322485/how-to-i-get-the-primary-ip-address-of-the-local-machine-on-linux-and-os-x
#export XDEBUG_HOST=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n1)

# Other env variables
STEP="Setting ENV variables"
export APP_ENV=${APP_ENV:-local}
export APP_PORT=${APP_PORT:-80}
export DB_PORT=${DB_PORT:-3306}
export DB_ROOT_PASS=${DB_ROOT_PASS:-secret}
export DB_NAME=${DB_NAME:-helpspot}
export DB_USER=${DB_USER:-helpspot}
export DB_PASS=${DB_PASS:-secret}

# Decide which docker-compose file to use
COMPOSE_FILE="dev"

# Disable pseudo-TTY allocation for CI (Jenkins)
TTY=""

if [ ! -z "$BUILD_NUMBER" ]; then
    COMPOSE_FILE="ci"
    TTY="-T"
fi

COMPOSE="docker-compose -f docker-compose.$COMPOSE_FILE.yml"

if [ $# -gt 0 ];then
    if [ "$1" == "art" ]; then
		STEP="Running artisan command"
        shift 1
        $COMPOSE run --rm $TTY \
            -w /var/www/html \
            app \
            php artisan "$@"
    # If "composer" is used, pass-thru to "composer"
    # inside a new container
    elif [ "$1" == "composer" ]; then
		STEP="Running composer command"
        shift 1
        $COMPOSE run --rm $TTY \
            -w /var/www/html \
            app \
            composer "$@"

    # If "test" is used, run unit tests,
    # pass-thru any extra arguments to php-unit
    elif [ "$1" == "test" ]; then
		STEP="Running phpunit command in new app container"
        shift 1
        $COMPOSE run --rm $TTY \
            -w /var/www/html \
            app \
            ./vendor/bin/phpunit "$@"

    elif [ "$1" == "t" ]; then
		STEP="Running phpunit command in existing app container"
		shift 1
		$COMPOSE exec \
			app \
			sh -c "cd /var/www/html && ./vendor/bin/phpunit $@"

    # If "npm" is used, run npm
    # from our node container
    elif [ "$1" == "npm" ]; then
		STEP="Running npm command"
        shift 1
        $COMPOSE run --rm $TTY \
            -w /var/www/html \
            node \
            npm "$@"

    # If "gulp" is used, run gulp
    # from our node container
    elif [ "$1" == "gulp" ]; then
		STEP="Running gulp command"
        shift 1
        $COMPOSE run --rm $TTY \
            -w /var/www/html \
            node \
            ./node_modules/.bin/gulp "$@"
    else
		STEP="Running any override docker command"
        $COMPOSE "$@"
    fi
else
    $COMPOSE ps
fi
